{"version":3,"sources":["../../../src/helpers.js"],"names":["helpers","string","format","str","arguments","index","regex","RegExp","replace","sanitizer","sanitize","input","versionCompare","version1","version2","toLowerCase","version1Parts","split","majorVersion1","parseInt","minorVersion1","pathVersion1","rcVersion1","pathVersion1String","indexOf","pathVersion1StringParts","version2Parts","majorVersion2","minorVersion2","pathVersion2","rcVersion2","pathVersion2String","pathVersion2StringParts"],"mappings":"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","file":"helpers.js","sourcesContent":["/*\r\nCopyright Captcha, Inc. 2004-2023. All rights reserved.\r\n\r\nBotDetect, BotDetect CAPTCHA, Lanap, Lanap CAPTCHA, Lanap BotDetect, \r\nLanap BotDetect CAPTCHA, Lanapsoft, Lanapsoft CAPTCHA, \r\nLanapsoft BotDetect, Lanapsoft BotDetect CAPTCHA, and Lanap Software \r\nare trademarks of Captcha, Inc. All other product, brand, and company \r\nnames are mentioned for identification purposes only and are trademarks \r\nor registered trademarks of their respective owners.\r\n\r\nCaptcha, Inc. - formerly: Lanapsoft, Inc. / Lanap, Inc.\r\n*/\r\n\r\nconst helpers = {\r\n  string: {\r\n    format: function() {\r\n      let str = arguments[0];\r\n      for (const index in arguments) {\r\n        const regex = new RegExp(\"\\\\{\" + (index - 1) + \"\\\\}\", \"g\");\r\n        str = str.replace(regex, arguments[index]);\r\n      }\r\n      return str;\r\n    }\r\n  },\r\n\r\n  sanitizer: {\r\n    sanitize: function(input) {\r\n      input = input.replace(/[^a-zA-Z0-9\\.\\-\\_\\~\\!\\$\\&\\(\\)\\*\\+\\,\\;\\=\\:\\@\\%\\#\\/\\?]/gim, '');\r\n      return input;\r\n    }\r\n  },\r\n\r\n  versionCompare(version1, version2) {\r\n    version1 = version1.toLowerCase();\r\n    const version1Parts = version1.split('.');\r\n    const majorVersion1 = parseInt(version1Parts[0]);\r\n    const minorVersion1 = parseInt(version1Parts[1]);\r\n    let pathVersion1, rcVersion1;\r\n    const pathVersion1String = version1Parts[2];\r\n    if (pathVersion1String.indexOf('-rc') !== -1) {\r\n      // version1 is RC version\r\n      const pathVersion1StringParts = pathVersion1String.split('-rc');\r\n      pathVersion1 = parseInt(pathVersion1StringParts[0]);\r\n      rcVersion1 = parseInt(pathVersion1StringParts[1]);\r\n    } else {\r\n      pathVersion1 = parseInt(version1Parts[2]);\r\n    }\r\n    \r\n    version2 = version2.toLowerCase();\r\n    const version2Parts = version2.split('.');\r\n    const majorVersion2 = parseInt(version2Parts[0]);\r\n    const minorVersion2 = parseInt(version2Parts[1]);\r\n    let pathVersion2, rcVersion2;\r\n    const pathVersion2String = version2Parts[2];\r\n    if (pathVersion2String.indexOf('-rc') !== -1) {\r\n      // version2 is RC version\r\n      const pathVersion2StringParts = pathVersion2String.split('-rc');\r\n      pathVersion2 = parseInt(pathVersion2StringParts[0]);\r\n      rcVersion2 = parseInt(pathVersion2StringParts[1]);\r\n    } else {\r\n      pathVersion2 = parseInt(version2Parts[2]);\r\n    }\r\n  \r\n    if (majorVersion1 > majorVersion2) { return 1; } // version1 > version2\r\n    if (majorVersion1 < majorVersion2) { return -1; } // version1 < version2\r\n  \r\n    if (minorVersion1 > minorVersion2) { return 1; } // version1 > version2\r\n    if (minorVersion1 < minorVersion2) { return -1; } // version1 < version2\r\n  \r\n    if (pathVersion1 > pathVersion2) { return 1; } // version1 > version2\r\n    if (pathVersion1 < pathVersion2) { return -1; } // version1 < version2\r\n\r\n    if (rcVersion1 && rcVersion2) {\r\n      if (rcVersion1 > rcVersion2) { return 1; } // version1 > version2\r\n      if (rcVersion1 < rcVersion2) { return -1; } // version1 < version2\r\n    }\r\n\r\n    return 0; // version1 = version2\r\n  }\r\n}\r\n\r\nexport default helpers;\r\n"]}