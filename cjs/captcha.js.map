{"version":3,"sources":["../../../src/captcha.js"],"names":["pluginInfo","plugin","pluginId","releaseNo","requiredCoreReleaseNo","Captcha","props","captchaTagId","captchaFormId","isCaptchaRendered","settings","CaptchaSettings","load","captcha","createCaptchaInstance","displayCaptcha","captchaTag","document","getElementById","errorMessage","Error","helpers","string","format","getHtml","captchaHtml","innerHTML","sanitizeSettings","executeRequiredCoreReleaseNoCheck","executeRequiredSettingsCheck","integrationType","callerPluginId","save","React","Component","sanitized","key","value","sanitizer","sanitize","captchaEndpointUrl","languageTag","reportError","callerPlugin","callerReleaseNo","callerRequiredCoreReleaseNo","runningCoreReleaseNo","versionCompare"],"mappings":"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","file":"captcha.js","sourcesContent":["/*\r\nCopyright Captcha, Inc. 2004-2023. All rights reserved.\r\n\r\nBotDetect, BotDetect CAPTCHA, Lanap, Lanap CAPTCHA, Lanap BotDetect, \r\nLanap BotDetect CAPTCHA, Lanapsoft, Lanapsoft CAPTCHA, \r\nLanapsoft BotDetect, Lanapsoft BotDetect CAPTCHA, and Lanap Software \r\nare trademarks of Captcha, Inc. All other product, brand, and company \r\nnames are mentioned for identification purposes only and are trademarks \r\nor registered trademarks of their respective owners.\r\n\r\nCaptcha, Inc. - formerly: Lanapsoft, Inc. / Lanap, Inc.\r\n*/\r\n\r\nimport React from 'react';\r\nimport CaptchaSettings from './captcha-settings';\r\nimport helpers from './helpers';\r\nimport { \r\n  createJsCaptchaIntegrationCoreInstance, \r\n  getJsCaptchaIntegrationCoreReleaseNo \r\n} from 'javascript-captcha/es6/js-captcha-integration-core';\r\n\r\nconst pluginInfo = {\r\n  plugin: 'reactjs-captcha',\r\n  pluginId: '203',\r\n  releaseNo: '4.5.0-RC2',\r\n  requiredCoreReleaseNo: '4.5.0-RC2'\r\n}\r\n\r\nclass Captcha extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.captchaTagId = 'captcha_tag_' + this.props.captchaFormId;\r\n    this.isCaptchaRendered = false;\r\n  }\r\n\r\n  get releaseNo() {\r\n    return pluginInfo.releaseNo;\r\n  }\r\n\r\n  static createCaptchaInstance(settings) {\r\n    settings = sanitizeSettings(settings);\r\n\r\n    executeRequiredCoreReleaseNoCheck();\r\n    executeRequiredSettingsCheck(settings);\r\n    \r\n    const captcha = createJsCaptchaIntegrationCoreInstance(settings);\r\n    captcha.integrationType = pluginInfo.callerPluginId;\r\n    \r\n    CaptchaSettings.save(settings.captchaFormId, settings);\r\n\r\n    return captcha;\r\n  }\r\n\r\n  // generate captcha html markup in view\r\n  componentDidMount() {\r\n    const captchaFormId = this.props.captchaFormId;\r\n    const settings = CaptchaSettings.load(captchaFormId);\r\n    if (settings && !this.isCaptchaRendered) {\r\n      this.isCaptchaRendered = true;\r\n      const captcha = Captcha.createCaptchaInstance(settings);\r\n      this.displayCaptcha(captcha, captchaFormId);\r\n    }\r\n  }\r\n\r\n  displayCaptcha(captcha, captchaFormId) {\r\n    const captchaTag = document.getElementById('captcha_tag_' + captchaFormId);\r\n\r\n    if (!captchaTag) {\r\n      const errorMessage = `Could not find captcha tag. \r\n    Please add <Captcha captchaFormId=\"{0}\"/> element in your component template.\r\n      `;\r\n      throw new Error(helpers.string.format(errorMessage, captchaFormId));\r\n    }\r\n\r\n    captcha.getHtml(\r\n      (captchaHtml) => {\r\n        captchaTag.innerHTML = captchaHtml;\r\n      },\r\n      (errorMessage) => {\r\n        captchaTag.innerHTML = errorMessage;\r\n      }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id={this.captchaTagId}></div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction sanitizeSettings(settings) {\r\n  let sanitized = {};\r\n  for (let key in settings) {\r\n    const value = settings[key];\r\n    sanitized[key] = helpers.sanitizer.sanitize(value);\r\n  }\r\n  return sanitized;\r\n}\r\n\r\nfunction executeRequiredSettingsCheck(settings) {\r\n  if (!(settings.captchaFormId && settings.captchaEndpointUrl && settings.languageTag)) {\r\n    const errorMessage = `Invalid captcha settings!\r\n  The React Captcha Component requires the three \"captchaFormId\", \"captchaEndpointUrl\", and \"languageTag\" properties to be set.\r\n  For example: \r\n  constructor(): {\r\n    this.captcha = Captcha.createCaptchaInstance({\r\n      captchaFormId: 'your_form',\r\n      languageTag: 'en-US',\r\n      captchaEndpointUrl: 'https://your-app-backend-hostname.your-domain.com/simple-captcha-endpoint-url'\r\n    });\r\n  }\r\n    `;\r\n    throw new Error(errorMessage);\r\n  }\r\n}\r\n\r\nfunction executeRequiredCoreReleaseNoCheck() {\r\n  let reportError = false;\r\n\r\n  const callerPlugin = pluginInfo.plugin;\r\n  const callerReleaseNo = pluginInfo.releaseNo;\r\n  const callerRequiredCoreReleaseNo = pluginInfo.requiredCoreReleaseNo;\r\n  const runningCoreReleaseNo = getJsCaptchaIntegrationCoreReleaseNo();\r\n\r\n  // report error if runningCoreReleaseNo < callerRequiredCoreReleaseNo\r\n  if (helpers.versionCompare(runningCoreReleaseNo, callerRequiredCoreReleaseNo) === -1) { \r\n    reportError = true;\r\n  }\r\n\r\n  if (reportError) {\r\n    const errorMessage = `You are using '{0}' plugin r{1}\r\n  You are using 'javascript-captcha' plugin r{3}\r\n  The '{0}' plugin r{1} requires 'javascript-captcha' plugin r{2} or higher\r\n    `;\r\n    throw new Error(helpers.string.format(errorMessage, \r\n                                        callerPlugin, \r\n                                        callerReleaseNo,\r\n                                        callerRequiredCoreReleaseNo,\r\n                                        runningCoreReleaseNo));\r\n  }\r\n}\r\n\r\nexport default Captcha;\r\n"]}